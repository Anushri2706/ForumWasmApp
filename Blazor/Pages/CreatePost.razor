@page "/CreatePost"
@using Domain.DTOs
@using Domain.Model
@using HttpsClients.ClientInterfaces
@inject IPostService postService
@inject IUserService userService
@inject NavigationManager navMgr

<div class="card">
    <h3>Create Post</h3>
    <div class="form-group field">
        <label>Title:</label>
        <input type="text" @bind="postTitle"/>
    </div>
    <div>
        &nbsp
    </div>
    <div class="form-group field">
        <label>Body:</label>
        <input type="text" @bind="postBody"/>
    </div>
    
        <div class="button-row">
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }
            <button @onclick="Create" class="acceptbtn">Create</button>
        </div>
</div>

@code {
    private IEnumerable<User>? users;
    private int? selectedUserId;
    private string postTitle = "";
    private string postBody = "";

    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = await userService.GetUsersAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task Create()
    {
        msg = "";
        if (selectedUserId == null)
        {
            msg = "You must select an assignee!";
            return;
        }
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(postBody))
        {
            msg = "Body cannot be empty!";
            return;
        }

        try
        {
            PostCreationDto dto = new((int)selectedUserId, postTitle, postBody);
            await postService.CreateAsync(dto);
            navMgr.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}
